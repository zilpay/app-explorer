scilla_version 0

library ZilPayManager

(* Global variables *)
let zero128 = Uint128 0
let zero256 = Uint256 0

let one_msg =
  fun (msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint256 = @option_value Uint256

let zlp_to_blocks =
    fun (amount: Uint128) =>
    fun (block_decimal: Uint256) =>
    let some_amount_256 = builtin to_uint256 amount in
    let amount_256 = option_uint256 zero256 some_amount_256 in
      builtin div amount_256 block_decimal


(* Custom ADT storing - Title, ipfs_description, url, ipfs_image, ipfs_icon, category *)
type App =
| App of String String String (List String) String Uint32

(* Custom ADT storing - end_block_number, url, ipfs_banner_url *)
type Banner =
| Banner of Uint256 String String

(* Error events *)
type Error =
  | CodeNotContractOwner
  | CodeOnPause
  | CodeNotValidator
  | CodeInsufficientZLPAmount
  | CodeIncorrectCategory

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotContractOwner      => Int32 -1
      | CodeOnPause               => Int32 -2
      | CodeNotValidator          => Int32 -3
      | CodeInsufficientZLPAmount => Int32 -4
      | CodeIncorrectCategory     => Int32 -5
      end
    in
    { _exception : "Error"; code : result_code }

contract ZilPayManager

(*  Parameters *)
(
  contract_owner: ByStr20,
  zlp: ByStr20,
  validator: ByStr20
)


(* Mutable fields *)
field pause: Bool = False
field max_category: Uint32 = Uint32 6

field min_price_for_ad: Uint128 = Uint128 2000000000000000000
field price_for_app: Uint128 = Uint128 0
field block_decimal: Uint256 = Uint256 2000000000000000000

field contract_validator: ByStr20 = validator

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsValidator()
  contract_address <- contract_validator;
  is_validator = builtin eq contract_address _sender;

  match is_validator with
  | True =>
  | False =>
    err = CodeNotValidator;
    ThrowError err
  end
end

procedure CheckPriceForAD(amount: Uint128)
  price <- min_price_for_ad;

  is_lt = builtin lt amount price;

  match is_lt with
  | True =>
    err = CodeInsufficientZLPAmount;
    ThrowError err
  | False =>
  end
end

procedure CheckPause()
  curent_pause <- pause;

  match curent_pause with
  | True =>
    err = CodeOnPause;
    ThrowError err
  | False =>
  end
end

procedure CheckCategory(category: Uint32)
  max <- max_category;

  is_valid = builtin lt max category;

  match is_valid with
  | True =>
    err = CodeIncorrectCategory;
    ThrowError err
  | False =>
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;

  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure TransferFrom(amount: Uint128, from: ByStr20)
  is_zero = builtin eq zero128 amount;

  match is_zero with
  | False =>
    to <- contract_validator;

    call_transfer_zlp = {
      _tag: "TransferFrom";
      _recipient: zlp;
      _amount: Uint128 0;
      from: from;
      to: to;
      amount: amount
    };

    msgs = one_msg call_transfer_zlp;

    send msgs
  | True =>
  end
end

procedure SendAppToCheck(app: App)
  recipient <- contract_validator;

  call_add_app = {
    _tag: "AddApp";
    _recipient: recipient;
    _amount: Uint128 0;
    app: app;
    owner: _sender
  };

  msgs = one_msg call_add_app;

  send msgs
end

procedure SendADToCheck(ad: Banner, owner: ByStr20, amount: Uint128)
  recipient <- contract_validator;

  call_add_ad = {
    _tag: "AddAD";
    _recipient: recipient;
    _amount: Uint128 0;
    banner: ad;
    owner: owner;
    amount: amount
  };

  msgs = one_msg call_add_ad;

  send msgs
end

(* Admin transitions *)
transition ConfigurePause()
  IsContractOwner;
  curent_pause <- pause;

  new_pause = match curent_pause with
  | True =>
    False
  | False =>
    True
  end;

  pause := new_pause;

  e = {
    _eventname : "ContractPauseEvent";
    pause: new_pause
  };
  event e
end

transition ConfigureCategory(value: Uint32)
  IsContractOwner;

  max_category := value;

  e = {
    _eventname : "ConfigureCategoryEvent";
    max_category: value
  };
  event e
end

transition ConfigureBlockDecimal(value: Uint256)
  IsContractOwner;

  block_decimal := value;

  e = {
    _eventname : "ConfiguredBlockDecimalEvent";
    new_block_decimal: value
  };
  event e
end

transition ConfigureADPrice(new_price: Uint128)
  IsContractOwner;

  old_price <- min_price_for_ad;

  min_price_for_ad := new_price;

  e = {
    _eventname : "ConfiguredAdPriceEvent";
    old_price: old_price;
    new_price: new_price
  };
  event e
end

transition ConfigureAppPrice(new_price: Uint128)
  IsContractOwner;

  old_price <- price_for_app;

  price_for_app := new_price;

  e = {
    _eventname : "ConfiguredAppPriceEvent";
    old_price: old_price;
    new_price: new_price
  };
  event e
end
(* Admin transitions *)

(* User transitions *)
transition AddApp(title: String, des_url: String, url: String, ipfs_image: List String, ipfs_icon: String, category: Uint32)
  CheckPause;
  CheckCategory category;

  price <- price_for_app;

  TransferFrom price _sender;

  new_app = App title des_url url ipfs_image ipfs_icon category;

  SendAppToCheck new_app
end

transition AddAD(amountZLP: Uint128, url: String, banner_url: String)
  CheckPause;
  CheckPriceForAD amountZLP;
  TransferFrom amountZLP _sender;
  
  decimal <- block_decimal;

  zlp_to_blocks = zlp_to_blocks amountZLP decimal;
  new_ad = Banner zlp_to_blocks url banner_url;

  SendADToCheck new_ad _sender amountZLP
end
(* User transitions *)

(* Callbacks *)
transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end
(* Callbacks *)
