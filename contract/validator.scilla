scilla_version 0

library ZilPayValidator

(* User-defined ADTs *)
type Dummy =
| Dummy

let zero_address = 0x0000000000000000000000000000000000000000

(* Global variables *)
let zero256 = Uint256 0
let zerobn = BNum 0
let verdad = Dummy

let one_msg =
  fun (msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint256 = @option_value Uint256

let bn_to_uint =
  fun (block_number: BNum) =>
  let int_block = builtin bsub block_number zerobn in
  let some_int_block = builtin to_uint256 int_block in
    option_uint256 zero256 some_int_block

let zlp_to_blocks =
    fun (amount: Uint128) =>
    fun (block_decimal: Uint256) =>
    let some_amount_256 = builtin to_uint256 amount in
    let amount_256 = option_uint256 zero256 some_amount_256 in
      builtin div amount_256 block_decimal


(* Custom ADT storing - Title, ipfs_description, url, ipfs_image, ipfs_icon, category *)
type App =
| App of String String String (List String) String Uint32

(* Custom ADT storing - end_block_number, owner_of_app, ipfs_banner_url *)
type AD =
| AD of Uint256 ByStr20 String

(* Error events *)
type Error =
  | CodeNotContractOwner
  | CodeOnPause
  | CodeNotValidator
  | CodeNotFound
  | CodeNotManager

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotContractOwner      => Int32 -1
      | CodeOnPause               => Int32 -2
      | CodeNotValidator          => Int32 -3
      | CodeNotFound              => Int32 -4
      | CodeNotManager            => Int32 -5
      end
    in
    { _exception : "Error"; code : result_code }

contract ZilPayValidator

(*  Parameters *)
(
  contract_owner: ByStr20,
  explorer: ByStr20
)

(* Mutable fields *)
field pause: Bool = False

field block_decimal: Uint256 = Uint256 2000000000000000000

field wait_list_app: Map ByStr20 App = Emp ByStr20 App
field wait_ad_list: Map ByStr20 AD = Emp ByStr20 AD

field manager: ByStr20 = zero_address
field validator_list: Map ByStr20 Dummy = let emp_map = Emp ByStr20 Dummy in
  builtin put emp_map contract_owner verdad 


(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsValidator()
  is_validator <- exists validator_list[_sender];

  match is_validator with
  | True =>
  | False =>
    err = CodeNotValidator;
    ThrowError err
  end
end

procedure IsManager()
  address_manager <- manager;

  is_manager = builtin eq address_manager _sender;

  match is_manager with
  | True =>
  | False =>
    err = CodeNotManager;
    ThrowError err
  end
end

procedure IsWaitExistsApp(app_owner: ByStr20)
  is_app <- exists wait_list_app[app_owner];

  match is_app with
  | False =>
    err = CodeNotFound;
    ThrowError err
  | True =>
  end
end

procedure IsExistsAD(ad_owner: ByStr20)
  is_ad <- exists wait_ad_list[ad_owner];

  match is_ad with
  | False =>
    err = CodeNotFound;
    ThrowError err
  | True =>
  end
end

procedure CheckPause()
  curent_pause <- pause;

  match curent_pause with
  | True =>
    err = CodeOnPause;
    ThrowError err
  | False =>
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure SendAD(ad: AD, owner: ByStr20)
  msg = {
    _tag : "AddBanner";
    _recipient: explorer;
    _amount: Uint128 0;
    ad: ad;
    owner: owner
  };
  msgs = one_msg msg;
  send msgs
end

procedure SendApp(app: App, owner: ByStr20)
  msg = {
    _tag : "AddApplication";
    _recipient: explorer;
    _amount: Uint128 0;
    app: app;
    owner: owner
  };
  msgs = one_msg msg;
  send msgs
end

procedure ConfigureValidator(address: ByStr20)
  is_validator <- exists validator_list[address];

  match is_validator with
  | True =>
    delete validator_list[address];

    e = {
      _eventname : "RemovedValidatorEvent";
      address: address
    };
    event e
  | False =>
    validator_list[address] := verdad;

    e = {
      _eventname : "AddedValidatorEvent";
      address: address
    };
    event e
  end
end

procedure ValidationADReject(app_owner: ByStr20)
  IsExistsAD app_owner;

  delete wait_ad_list[app_owner];

  e = {
    _eventname : "ValidationADRejectEvent";
    app_owner: app_owner
  };
  event e
end

procedure ValidationADSuccess(ad_owner: ByStr20)
  IsExistsAD ad_owner;

  some_confirmed_ad <- wait_ad_list[ad_owner];
  current_block <- & BLOCKNUMBER;

  match some_confirmed_ad with
  | Some confirmed_ad =>
    match confirmed_ad with
    | AD block owner url =>
      delete wait_ad_list[ad_owner];

      block_256 = bn_to_uint current_block;
      end_block = builtin add block_256 block;
      new_add = AD end_block owner url;

      SendAD new_add ad_owner;

      e = {
        _eventname : "ValidationADSuccessEvent";
        new_banner: new_add;
        current_block: current_block;
        ad_owner: ad_owner
      };
      event e
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

procedure ValidationAppSuccess(app_owner: ByStr20)
  IsWaitExistsApp app_owner;

  some_confirmed_app <- wait_list_app[app_owner];

  match some_confirmed_app with
  | Some confirmed_app =>
    delete wait_list_app[app_owner];

    SendApp confirmed_app app_owner;

    e = {
      _eventname : "ValidationAppSuccessEvent";
      app: confirmed_app;
      app_owner: app_owner
    };
    event e
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

procedure ValidationAppReject(app_owner: ByStr20)
  IsWaitExistsApp app_owner;

  delete wait_list_app[app_owner];

  e = {
    _eventname : "ValidationAppRejectEvent";
    app_owner: app_owner
  };
  event e
end

(* Admin transitions *)
transition ConfigurePause()
  IsContractOwner;
  curent_pause <- pause;

  new_pause = match curent_pause with
  | True =>
    False
  | False =>
    True
  end;

  pause := new_pause;

  e = {
    _eventname : "ContractPauseEvent";
    pause: new_pause
  };
  event e
end

transition ConfigureManager(new_manager: ByStr20)
  IsContractOwner;

  manager := new_manager;

  e = {
    _eventname : "ConfigureManagerEvent";
    manager: new_manager
  };
  event e
end

transition ConfigureBlockDecimal(value: Uint256)
  IsContractOwner;

  block_decimal := value;

  e = {
    _eventname : "ConfiguredBlockDecimalEvent";
    new_block_decimal: value
  };
  event e
end

transition ConfigureValidatorList(addresses: List ByStr20)
  IsContractOwner;

  forall addresses ConfigureValidator
end
(* Admin transitions *)

(* Validator transitions *)
transition AppSuccessList(app_owners: List ByStr20)
  CheckPause;
  IsValidator;

  forall app_owners ValidationAppSuccess
end

transition AppRejectList(app_owners: List ByStr20)
  CheckPause;
  IsValidator;

  forall app_owners ValidationAppReject
end

transition ADSuccessList(ad_owners: List ByStr20)
  CheckPause;
  IsValidator;

  forall ad_owners ValidationADSuccess
end

transition ADRejectList(ad_owners: List ByStr20)
  CheckPause;
  IsValidator;

  forall ad_owners ValidationADReject
end
(* Validator transitions *)

(* manager transitions *)
transition AddApp(app: App, owner: ByStr20)
  CheckPause;
  IsManager;

  wait_list_app[owner] := app;

  e = {
    _eventname : "AddedAppEvent";
    added_app: app;
    onwer: owner
  };
  event e
end

transition AddAD(ad: AD, owner: ByStr20)
  CheckPause;
  IsManager;

  wait_ad_list[owner] := ad;

  e = {
    _eventname : "AddedADEvent";
    ad: ad;
    onwer: owner
  };
  event e
end
(* manager transitions *)
