scilla_version 0

import BoolUtils

library ZilPayValidator

(* Custom ADT storing - Title, ipfs_description, url, ipfs_image, ipfs_icon, category, rejected, approve *)
type Application =
  | Application of String String String (List String) String Uint32 Uint32 Uint32

(* Custom ADT storing - end_block_number, url, ipfs_banner_url, rejected, approve *)
type Advertising =
  | Advertising of Uint256 String String Uint32 Uint32

(* Custom ADT storing - Title, ipfs_description, url, ipfs_image, ipfs_icon, category *)
type App =
  | App of String String String (List String) String Uint32

(* Custom ADT storing - end_block_number, url, ipfs_banner_url *)
type Banner =
  | Banner of Uint256 String String

type Operation =
  | Add
  | Sub

type ValidatorOperation =
  | Reject
  | Approve
  | NotEnough

(* Error events *)
type Error =
  | CodeNotContractOwner
  | CodeOnPause
  | CodeNotValidator
  | CodeNotFound
  | CodeNotManager
  | CodeNotZLP
  | CodeInsufficientAmount
  | CodeIsNotOwnerOrOperator
  | CodeAlreadyVoted
  | CodeAlreadyExists

type Dummy =
  | Dummy

(* Global variables *)
let zero_address = 0x0000000000000000000000000000000000000000
let verdad = Dummy
let zero256 = Uint256 0
let zero128 = Uint128 0
let zero32  = Uint32 0
let zerobn  = BNum 0

let one32   = Uint32 1
let two32   = Uint32 2

let add_operation = Add
let sub_operation = Sub
(* Global variables *)

let one_msg =
  fun (msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint256 = @option_value Uint256
let option_uint128 = @option_value Uint128

(* Calculate new amount of tokens *)
(* Return the new amount *)
let update_tokens_count =
  fun (amount: Uint128) =>
  fun (some_balance: Option Uint128) =>
  fun (operation: Operation) =>
    let balance = option_uint128 zero128 some_balance in
      match operation with
      | Add =>
        builtin add balance amount
      | Sub =>
        builtin sub balance amount
      end

let build_app_msg =
  fun (app: Application) =>
  fun (owner: ByStr20) =>
  fun (explorer: ByStr20) =>
    match app with
    | Application t d u im ic ct r a =>
      let app = App t d u im ic ct in
      let msg = {
        _tag : "AddApplication";
        _recipient: explorer;
        _amount: Uint128 0;
        app: app;
        owner: owner
      } in one_msg msg
    end

(* Check the Advertising for validation *)
(* 0 need more vote *)
(* 1 Advertising was rejected *)
(* 2 Advertising was aporved *)
let is_approved_advertising =
  fun (ad: Advertising) =>
  fun (total_moderators: Uint32) =>
    match ad with
    | Advertising bn url ipfs rejected approve =>
      let total = builtin div total_moderators two32 in
      let count = builtin add rejected approve in
      let is_validated = builtin lt total count in
        match is_validated with
          | False => NotEnough (* Not enough vote *)
          | True =>
            let is_approve = builtin lt rejected approve in
            match is_approve with
            | False => Reject (* AD has rejected by validators *)
            | True => Approve (* AD has aproved by validators *)
            end
        end
    end

(* set vote *)
(* return the new AD *)
let validate_advertising =
  fun (ad: Advertising) =>
  fun (n: Uint32) =>
    let is_approve = builtin eq n one32 in
    match ad with
    | Advertising bn url ipfs rejected approve =>
      match is_approve with
      | True =>
        let new_approve = builtin add approve one32 in
          Advertising bn url ipfs rejected new_approve
      | False =>
        let new_rejected = builtin add rejected one32 in
          Advertising bn url ipfs new_rejected approve
      end
    end

(* Check if approved app *)
let is_approved_app =
  fun (app: Application) =>
  fun (total_moderators: Uint32) =>
    match app with
    | Application t d u im ic ct r a =>
      let total = builtin div total_moderators two32 in
      let count = builtin add r a in
      let is_validated = builtin lt total count in
        match is_validated with
          | False => NotEnough (* Not enough vote *)
          | True =>
            let is_approve = builtin lt r a in
            match is_approve with
            | False => Reject (* AD has rejected nby validators *)
            | True => Approve (* AD has aproved by validators *)
            end
        end
    end

(* Validation process *)
let validate_app =
  fun (app: Application) =>
  fun (n: Uint32) =>
    let is_approve = builtin eq n one32 in
    match app with
    | Application t d u im ic ct r a =>
      match is_approve with
      | True =>
        let new_approve = builtin add a one32 in
          Application t d u im ic ct r new_approve
      | False =>
        let new_rejected = builtin add r one32 in
          Application t d u im ic ct new_rejected a
      end
    end

(* Calculate percet of amount *)
let percent_of_amount =
  fun (percent: Uint128) =>
  fun (amount: Uint128)  =>
    let n_100 = Uint128 100 in
    let value = builtin mul amount percent in
      builtin div value n_100

let bn_to_uint =
  fun (block_number: BNum) =>
  let int_block = builtin bsub block_number zerobn in
  let some_int_block = builtin to_uint256 int_block in
    option_uint256 zero256 some_int_block

let build_banner_msg =
  fun (ad: Advertising) =>
  fun (owner: ByStr20) =>
  fun (explorer: ByStr20) =>
  fun (current_block: BNum) =>
    match ad with
    | Advertising block url ipfs rejected approve =>
      let block_256 = bn_to_uint current_block in
      let end_block = builtin add block_256 block in
      let banner = Banner end_block url ipfs in
      let msg = {
        _tag : "AddBanner";
        _recipient: explorer;
        _amount: Uint128 0;
        banner: banner;
        owner: owner
      } in one_msg msg
    end

let convert_banner =
  fun (banner: Banner) =>
  match banner with
  | Banner block url ipfs =>
    Advertising block url ipfs zero32 zero32
  end

let convert_app =
  fun (app: App) =>
  match app with
  | App t d u im ic ct =>
    Application t d u im ic ct zero32 zero32
  end

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotContractOwner      => Int32 -1
      | CodeOnPause               => Int32 -2
      | CodeNotValidator          => Int32 -3
      | CodeNotFound              => Int32 -4
      | CodeNotManager            => Int32 -5
      | CodeNotZLP                => Int32 -6
      | CodeInsufficientAmount    => Int32 -7
      | CodeIsNotOwnerOrOperator  => Int32 -8
      | CodeAlreadyVoted          => Int32 -9
      | CodeAlreadyExists         => Int32 -10
      end
    in
    { _exception : "Error"; code : result_code }

contract ZilPayValidator
(
  contract_owner: ByStr20,
  explorer: ByStr20,
  zlp: ByStr20
)

(* Mutable fields *)
field is_pause: Uint32 = zero32
field min_stake_amount: Uint128 = zero128
field manager: ByStr20 = zero_address
field rewards_fee: Uint128 = Uint128 10

field advertiser_list: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field wait_list_app: Map ByStr20 Application = Emp ByStr20 Application
field wait_ad_list: Map ByStr20 Advertising = Emp ByStr20 Advertising
field moderators_vote_list_banner: Map ByStr20 (Map ByStr20 Dummy) = Emp ByStr20 (Map ByStr20 Dummy)
field moderators_vote_list_app: Map ByStr20 (Map ByStr20 Dummy) = Emp ByStr20 (Map ByStr20 Dummy)

field total_moderators: Uint32 = zero32
field operators: Map ByStr20 (Map ByStr20 Dummy) = Emp ByStr20 (Map ByStr20 Dummy)
field holder_list: Map ByStr20 Uint128 = Emp ByStr20 Uint128

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsZLP()
  is_zlp = builtin eq zlp _sender;

  match is_zlp with
  | True =>
  | False =>
    err = CodeNotZLP;
    ThrowError err
  end
end

procedure IsManager()
  address_manager <- manager;

  is_manager = builtin eq address_manager _sender;

  match is_manager with
  | True =>
  | False =>
    err = CodeNotManager;
    ThrowError err
  end
end

procedure IsValidator()
  is_validator <- exists holder_list[_sender];

  match is_validator with
  | True =>
  | False =>
    err = CodeNotValidator;
    ThrowError err
  end
end

procedure CheckPause()
  p <- is_pause;

  on = builtin eq p one32;

  match on with
  | True =>
    err = CodeOnPause;
    ThrowError err
  | False =>
  end
end

procedure IsAlreadyVotedBanner(owner: ByStr20)
  is_voted <- exists moderators_vote_list_banner[owner][_sender];

  match is_voted with
  | True =>
    err = CodeAlreadyVoted;
    ThrowError err
  | False =>
  end
end

procedure IsAlreadyVotedApp(owner: ByStr20)
  is_voted <- exists moderators_vote_list_app[owner][_sender];

  match is_voted with
  | True =>
    err = CodeAlreadyVoted;
    ThrowError err
  | False =>
  end
end

procedure IsAlreadyAdvertising(owner: ByStr20)
  is_ad <- exists wait_ad_list[owner];

  match is_ad with
  | True =>
    err = CodeAlreadyExists;
    ThrowError err
  | False =>
  end
end

procedure IsAlreadyApplication(owner: ByStr20)
  is_app <- exists wait_list_app[owner];

  match is_app with
  | True =>
    err = CodeAlreadyExists;
    ThrowError err
  | False =>
  end
end
(* add checking sender and to *)
procedure isOwnerOrOperator(to: ByStr20)
  is_exists_operator <- exists operators[to][_sender];
  is_exists_owner <- exists holder_list[_sender];
  is_owner = match is_exists_owner with
    | True => builtin eq to _sender
    | False => False
  end;
  is_allow = orb is_exists_operator is_owner;

  match is_allow with
  | True =>
  | False =>
    err = CodeIsNotOwnerOrOperator;
    ThrowError err
  end
end

procedure CheckAmount(amount: Uint128)
  min_amount <- min_stake_amount;

  is_min_staked = builtin lt amount min_amount;

  match is_min_staked with
  | True =>
    err = CodeInsufficientAmount;
    ThrowError err
  | False =>
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure ConfigureTotalValidators(operation: Operation)
  total <- total_moderators;

  new_validators = match operation with
  | Add =>
    builtin add total one32
  | Sub =>
    builtin sub total one32
  end;

  total_moderators := new_validators
end

procedure ConfigureValidatorBalance(address: ByStr20, amount: Uint128, operation: Operation)
  some_balance <- holder_list[address];
  new_balance = update_tokens_count amount some_balance operation;
  is_zero = builtin eq new_balance zero128;

  match is_zero with
  | False =>
    holder_list[address] := new_balance
  | True =>
    delete holder_list[address]
  end
end

procedure ConfigureAdvertiserBalance(address: ByStr20, amount: Uint128, operation: Operation)
  some_balance <- advertiser_list[address];
  new_balance = update_tokens_count amount some_balance operation;
  is_zero = builtin eq new_balance zero128;

  match is_zero with
  | False =>
    advertiser_list[address] := new_balance
  | True =>
    delete advertiser_list[address]
  end
end

procedure CallTransfer(to: ByStr20, amount: Uint128)
  msg_transfer = {
    _tag: "Transfer";
    _recipient: zlp;
    _amount: zero128;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_transfer;
  send msgs
end

procedure WithdrawTokens(address: ByStr20, amount: Uint128)
  some_balance <- holder_list[address];
  balance = option_uint128 zero128 some_balance;
  is_lt = builtin lt balance amount;

  match is_lt with
  | True =>
    err = CodeInsufficientAmount;
    ThrowError err
  | False =>
    ConfigureValidatorBalance address balance sub_operation;
    ConfigureTotalValidators sub_operation;
    CallTransfer address balance;

    delete operators[address]
  end
end

procedure RemoveValidator(address: ByStr20)
  some_balance <- holder_list[address];
  balance = option_uint128 zero128 some_balance;

  WithdrawTokens address balance
end


(* Owner *)
(* TODO: add transition for remove validator, ad, app. *)
transition ConfigureManager(new_manager: ByStr20)
  IsContractOwner;

  manager := new_manager;

  e = {
    _eventname : "ConfigureManagerEvent";
    manager: new_manager
  };
  event e
end

transition ConfigurePause()
  IsContractOwner;

  p <- is_pause;

  on = builtin eq p one32;

  match on with
  | True =>
    is_pause := zero32
  | False =>
    is_pause := one32
  end
end

transition WithdrawSelf(to: ByStr20)
  IsContractOwner;

  some_balance <- holder_list[_this_address];

  balance = option_uint128 zero128 some_balance;

  ConfigureValidatorBalance _this_address balance sub_operation;
  CallTransfer to balance
end

transition RemoveValidatorList(addresses: List ByStr20)
  IsContractOwner;
  forall addresses RemoveValidator
end

transition RemoveAdvertising(ad_owners: List ByStr20)
  IsContractOwner;

  call_remove_ad = {
    _tag: "RemoveADList";
    _recipient: explorer;
    _amount: Uint128 0;
    ad_owners: ad_owners
  };

  msgs = one_msg call_remove_ad;

  send msgs
end

transition RemoveApplication(app_owner: ByStr20, category: Uint32)
  IsContractOwner;

  call_remove_app = {
    _tag: "RemoveApp";
    _recipient: explorer;
    _amount: Uint128 0;
    category: category;
    app_owner: app_owner
  };

  msgs = one_msg call_remove_app;

  send msgs
end
(* Onwer *)

(* common *)
(* TODO: add amount. *)
transition Withdraw(to: ByStr20, amount: Uint128)
  isOwnerOrOperator to;
  WithdrawTokens to amount
end
(* common *)

(* moderator *)
transition ApproveAdvertising(owner: ByStr20, approved: Uint32)
  CheckPause;
  IsValidator;
  IsAlreadyVotedBanner owner;

  some_ad <- wait_ad_list[owner];

  match some_ad with
  | Some ad =>
    some_advertiser_amount <- advertiser_list[owner];
    fee <- rewards_fee;
    total <- total_moderators;

    new_ad = validate_advertising ad approved;
    advertiser_amount = option_uint128 zero128 some_advertiser_amount;
    rewards = percent_of_amount fee advertiser_amount;
    variant = is_approved_advertising new_ad total;

    ConfigureAdvertiserBalance owner rewards sub_operation;
    ConfigureValidatorBalance _sender rewards add_operation;

    moderators_vote_list_banner[owner][_sender] := verdad;

    match variant with
    | NotEnough =>
      wait_ad_list[owner] := new_ad
    | Reject =>
      new_advertiser_amount = builtin sub advertiser_amount rewards;
      delete wait_ad_list[owner];
      delete advertiser_list[owner];
      delete moderators_vote_list_banner[owner];

      CallTransfer owner new_advertiser_amount
    | Approve =>
      current_block <- & BLOCKNUMBER;
      new_advertiser_amount = builtin sub advertiser_amount rewards;

      ConfigureValidatorBalance _this_address new_advertiser_amount add_operation;

      delete wait_ad_list[owner];
      delete advertiser_list[owner];
      delete moderators_vote_list_banner[owner];

      msg = build_banner_msg new_ad owner explorer current_block;
      send msg
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

transition ApproveApplication(owner: ByStr20, approved: Uint32)
  CheckPause;
  IsValidator;
  IsAlreadyVotedApp owner;

  some_app <- wait_list_app[owner];

  match some_app with
  | Some app =>
    total <- total_moderators;
    new_app = validate_app app approved;
    variant = is_approved_app new_app total;

    moderators_vote_list_app[owner][_sender] := verdad;

    match variant with
    | NotEnough =>
      wait_list_app[owner] := new_app
    | Reject =>
      delete wait_list_app[owner];
      delete moderators_vote_list_app[owner]
    | Approve =>
      delete wait_list_app[owner];
      delete moderators_vote_list_app[owner];

      msg = build_app_msg new_app owner explorer;
      send msg
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end
(* moderator *)

(* manager transitions *)
transition AddApp(app: App, owner: ByStr20)
  CheckPause;
  IsManager;
  IsAlreadyApplication owner;

  new_app = convert_app app;
  wait_list_app[owner] := new_app
end

transition AddAD(banner: Banner, owner: ByStr20)
  CheckPause;
  IsManager;
  IsAlreadyAdvertising owner;

  new_ad = convert_banner banner;
  wait_ad_list[owner] := new_ad
end
(* manager transitions *)

(* Callbacks *)
transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
  IsZLP;
  CheckPause;
  CheckAmount amount;
  ConfigureTotalValidators add_operation;
  ConfigureValidatorBalance sender amount add_operation
end

transition RecipientAcceptTransferFrom(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
  IsZLP;
  CheckPause;

  address_manager <- manager;
  is_manager = builtin eq address_manager initiator;

  match is_manager with
  | True =>
    ConfigureAdvertiserBalance sender amount add_operation
  | False =>
    CheckAmount amount;
    ConfigureTotalValidators add_operation;
    ConfigureValidatorBalance sender amount add_operation;

    operators[sender][initiator] := verdad
  end
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end
(* Callbacks *)
