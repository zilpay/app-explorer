scilla_version 0

library ZilPayExplorer

(* Custom ADT storing - Title, ipfs_description, url, ipfs_image, ipfs_icon, category *)
type App =
| App of String String String (List String) String Uint32

(* Custom ADT storing - amount_of_blocks, end_block_number, url, ipfs_banner_url *)
type Banner =
| Banner of Uint64 Uint64 String String

(* Error events *)
type Error =
  | CodeNotContractOwner
  | CodeNotValidator
  | CodeNotFound

(* Global variables *)
let zero_address = 0x0000000000000000000000000000000000000000
let zerobn  = BNum 0

let zero64 = Uint64 0
let one64 = Uint64 1

let one_msg =
  fun (msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let nil_banner_list = Nil {Banner}

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint64 = @option_value Uint64

let bn_to_uint =
  fun (block_number: BNum) =>
  let int_block = builtin bsub block_number zerobn in
  let some_int_block = builtin to_uint64 int_block in
    option_uint64 zero64 some_int_block

let list_filter_count: Uint64 -> List Banner -> Pair (List Banner) Uint64 =
  fun (b : Uint64) =>
    let foldr = @list_foldr Banner (Pair (List Banner) Uint64) in
    let iter =
      fun (h : Banner) =>
      fun (z : Pair (List Banner) Uint64) =>
        match z with
        | Pair bs counter =>
          match h with
          | Banner a e u i =>
            let h1 = builtin lt b e in
            match h1 with
            | True =>
              let l = Cons {Banner} h bs in
                Pair {(List Banner) Uint64} l counter
            | False =>
              let counter_new = builtin add counter a in
                Pair {(List Banner) Uint64} bs counter_new
            end
          end
        end in
      let init = Pair {(List Banner) Uint64} nil_banner_list zero64 in
        foldr iter init

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotContractOwner => Int32 -1
      | CodeNotValidator     => Int32 -2
      | CodeNotFound         => Int32 -3
      end
    in
    { _exception : "Error"; code : result_code }

contract ZilPayExplorer
(*  Parameters *)
(contract_owner: ByStr20)


(* Mutable fields *)
field app_list: Map Uint32 (Map ByStr20 App) = Emp Uint32 (Map ByStr20 App)
field ad_list: List Banner = nil_banner_list

field validator_contract: ByStr20 = zero_address
field reserve: Uint64 = Uint64 5000

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsValidator()
  validator_address <- validator_contract;
  is_validator = builtin eq validator_address _sender;

  match is_validator with
  | True =>
  | False =>
    err = CodeNotValidator;
    ThrowError err
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;

  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

(* Admin transitions *)
transition ConfigureValidator(address: ByStr20)
  IsContractOwner;
  validator_contract := address;

  e = {
    _eventname : "ValidatorChangedEvent";
    validator_contract: address
  };
  event e
end

transition ConfigureReserve(new_reserve: Uint64)
  IsContractOwner;
  reserve := new_reserve;

  e = {
    _eventname : "ReserveChangedEvent";
    reserve: new_reserve
  };
  event e
end

transition RemoveApp(category: Uint32, app_owner: ByStr20)
  IsValidator;
  delete app_list[category][app_owner];

  e = {
    _eventname : "AppRemoveEvent";
    app_owner: app_owner
  }
end
(* Admin transitions *)

(* validator transitions *)
transition AddApplication(title: String, des_url: String, url: String, ipfs_image: List String, ipfs_icon: String, category: Uint32, owner: ByStr20)
  IsValidator;

  new_app = App title des_url url ipfs_image ipfs_icon category;
  app_list[category][owner] := new_app;

  e = {
    _eventname : "AddedAppEvent";
    added_app: new_app;
    onwer: owner
  };
  event e
end

transition AddBanner(block: Uint64, end_block: Uint64, url: String, ipfs: String)
  IsValidator;

  block_number <- & BLOCKNUMBER;
  list <- ad_list;
  total_reserve <- reserve;

  current_block = bn_to_uint block_number;
  new_banner = Banner block end_block url ipfs;
  list_counter = list_filter_count current_block list;

  match list_counter with
  | Pair filtered_list counter =>
    new_reserve = builtin sub total_reserve counter;
    new_reserve = builtin add new_reserve block;
    new_list = Cons {Banner} new_banner filtered_list;
    ad_list := new_list;
    reserve := new_reserve;

    e = {
      _eventname : "AddedADEvent";
      added_banner: new_banner;
      reserve: new_reserve
    };
    event e
  end
end
(* validator transitions *)
