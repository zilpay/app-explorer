scilla_version 0

library ZilPayExplorer

(* User-defined ADTs *)
type Dummy =
| Dummy

(* Global variables *)
let zero128 = Uint128 0
let verdad = Dummy

let one_msg =
  fun (msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Custom ADT storing - Title ipfs_description, url, ipfs_image, ipfs_icon *)
type App =
| App of String String String String String

(* Error events *)
type Error =
  | CodeIsNotZLPContract
  | CodeNotContractOwner
  | CodePauseNotPause
  | CodeNotValidator
  | CodeDoesNotExists
  | CodeNotFound

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeIsNotZLPContract => Int32 -1
      | CodeNotContractOwner => Int32 -2
      | CodePauseNotPause    => Int32 -3
      | CodeNotValidator     => Int32 -4
      | CodeDoesNotExists    => Int32 -5
      | CodeNotFound         => Int32 -6
      end
    in
    { _exception : "Error"; code : result_code }

contract ZilPayExplorer

(*  Parameters *)
(
  contract_owner: ByStr20,
  proxy_zlp: ByStr20
)

(* Mutable fields *)
field pause: Bool = False
field price_for_ad: Uint128 = Uint128 10000000000000
field contract_proxy_zlp: ByStr20 = proxy_zlp
field wait_list_app: Map ByStr20 App = Emp ByStr20 App
field app_list: Map ByStr20 App = Emp ByStr20 App
field validator_list: Map ByStr20 Dummy = let emp_map = Emp ByStr20 Dummy in
  builtin put emp_map contract_owner verdad 

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsValidator(address: ByStr20)
  is_validator <- exists validator_list[address];

  match is_validator with
  | True =>
  | False =>
    err = CodeNotValidator;
    ThrowError err
  end
end

procedure IsExistsApp(app_owner: ByStr20)
  is_app <- exists wait_list_app[app_owner];

  match is_app with
  | False =>
    err = CodeDoesNotExists;
    ThrowError err
  | True =>
  end
end

procedure CheckPause()
  curent_pause <- pause;

  match curent_pause with
  | True =>
    err = CodePauseNotPause;
    ThrowError err
  | False =>
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure AcceptZLP(amount: Uint128, from: ByStr20)
  proxy_zlp_address <- contract_proxy_zlp;

  call_accept_zlp = {
    _tag: "AcceptZLP";
    _recipient: proxy_zlp_address;
    _amount: Uint128 0;
    from: from;
    amount: amount
  };

  msgs = one_msg call_accept_zlp;

  send msgs
end


(* Admin transitions *)
transition ConfigurePause()
  IsContractOwner;
  curent_pause <- pause;

  new_pause = match curent_pause with
  | True =>
    False
  | False =>
    True
  end;

  pause := new_pause;

  e = {
    _eventname : "ContractPauseEvent";
    pause: new_pause
  };
  event e
end

transition ConfigureADPrice(new_price: Uint128)
  IsContractOwner;

  old_price <- price_for_ad;

  price_for_ad := new_price;

  e = {
    _eventname : "ConfiguredAdPriceEvent";
    old_price: old_price;
    new_price: new_price
  };
  event e
end

transition RemoveApp(app_owner: ByStr20)
  IsContractOwner;

  some_app <- wait_list_app[app_owner];

  match some_app with
  | Some app =>
    delete wait_list_app[app_owner];

    e = {
      _eventname : "AppRemoveEvent";
      removed_app: app;
      app_owner: app_owner
    };
    event e
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

transition ConfigureProxyZLP(contractAddr: ByStr20)
  IsContractOwner;

  old_proxy_zlp <- contract_proxy_zlp;

  contract_proxy_zlp := contractAddr;

  e = {
    _eventname : "ConfigureProxyZLPEvent";
    new_proxy_zlp: contractAddr;
    old_proxy_zlp: old_proxy_zlp
  };
  event e
end
(* Admin transitions *)

(* Validator transitions *)
transition ValidationAppSuccess(app_owner: ByStr20)
  IsValidator _sender;
  IsExistsApp app_owner;

  some_confirmed_app <- wait_list_app[app_owner];

  match some_confirmed_app with
  | Some confirmed_app =>
    delete wait_list_app[app_owner];

    app_list[app_owner] := confirmed_app;

    e = {
      _eventname : "ValidationAppSuccessEvent";
      app: confirmed_app;
      app_owner: app_owner
    };
    event e
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

transition ValidationAppReject(app_owner: ByStr20)
  IsValidator _sender;
  IsExistsApp app_owner;

  some_rejected_app <- wait_list_app[app_owner];

  match some_rejected_app with
  | Some rejected_app =>
    delete wait_list_app[app_owner];

    e = {
      _eventname : "ValidationAppRejectEvent";
      app: rejected_app;
      app_owner: app_owner
    };
    event e
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end
(* Validator transitions *)

(* User transitions *)
transition AddApp(app: App)
  wait_list_app[_sender] := app;

  e = {
    _eventname : "AddedAppEvent";
    added_app: app;
    onwer: _sender
  };
  event e
end
(* User transitions *)
