scilla_version 0

library ZilPayExplorer

(* Global variables *)
let zero_address = 0x0000000000000000000000000000000000000000

let one_msg =
  fun (msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Custom ADT storing - Title, ipfs_description, url, ipfs_image, ipfs_icon, category *)
type App =
| App of String String String (List String) String Uint32

(* Custom ADT storing - end_block_number, url, ipfs_banner_url *)
type Banner =
| Banner of Uint256 String String

(* Error events *)
type Error =
  | CodeNotContractOwner
  | CodeNotValidator
  | CodeNotFound
  | CodeAlreadyExists

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotContractOwner      => Int32 -1
      | CodeNotValidator          => Int32 -2
      | CodeNotFound              => Int32 -3
      | CodeAlreadyExists         => Int32 -4
      end
    in
    { _exception : "Error"; code : result_code }

contract ZilPayExplorer

(*  Parameters *)
(contract_owner: ByStr20)


(* Mutable fields *)
field app_list : Map Uint32 (Map ByStr20 App) = Emp Uint32 (Map ByStr20 App)
field ad_list: Map ByStr20 Banner = Emp ByStr20 Banner

field validator_contract: ByStr20 = zero_address

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsValidator()
  validator_address <- validator_contract;
  is_validator = builtin eq validator_address _sender;

  match is_validator with
  | True =>
  | False =>
    err = CodeNotValidator;
    ThrowError err
  end
end

procedure IsAlreadyExistsPoster(poster_owner: ByStr20)
  is_ad <- exists ad_list[poster_owner];

  match is_ad with
  | False =>
  | True =>
    err = CodeAlreadyExists;
    ThrowError err
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;

  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure RemoveAD(app_owner: ByStr20)
  some_ad <- ad_list[app_owner];

  match some_ad with
  | Some ad =>
    delete ad_list[app_owner];

    e = {
      _eventname : "ADRemoveEvent";
      removed_ad: ad;
      app_owner: app_owner
    };
    event e
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end


(* Admin transitions *)
transition ConfigureValidator(address: ByStr20)
  IsContractOwner;
  validator_contract := address;

  e = {
    _eventname : "ValidatorChangedEvent";
    validator_contract: address
  };
  event e
end

transition RemoveApp(category: Uint32, app_owner: ByStr20)
  IsValidator;
  delete app_list[category][app_owner];

  e = {
    _eventname : "AppRemoveEvent";
    app_owner: app_owner
  }
end

transition RemoveADList(ad_owners: List ByStr20)
  IsValidator;

  forall ad_owners RemoveAD
end
(* Admin transitions *)

(* validator transitions *)
transition AddApplication(app: App, owner: ByStr20)
  IsValidator;

  match app with
  | App t d u im ic category =>
    app_list[category][owner] := app;

    e = {
      _eventname : "AddedAppEvent";
      added_app: app;
      onwer: owner
    };
    event e
  end
end

transition AddBanner(end_block: Uint256, url: String, ipfs: String, owner: ByStr20)
  IsValidator;
  IsAlreadyExistsPoster owner;

  new_banner = Banner end_block url ipfs;
  ad_list[owner] := new_banner;

  e = {
    _eventname : "AddedADEvent";
    added_banner: new_banner;
    onwer: owner
  };
  event e
end
(* validator transitions *)
